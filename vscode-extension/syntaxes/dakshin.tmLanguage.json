{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Dakshin",
    "scopeName": "source.dakshin",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#identifiers"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.dakshin",
                    "begin": "//",
                    "end": "$"
                },
                {
                    "name": "comment.block.dakshin",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.dakshin",
                    "match": "\\b(if|else|while|for|break|continue|return|switch|case|default|try|catch|finally|throw)\\b"
                },
                {
                    "name": "keyword.declaration.dakshin",
                    "match": "\\b(function|let|var|const|class|interface|enum|namespace|import|export|from|as)\\b"
                },
                {
                    "name": "keyword.type.dakshin",
                    "match": "\\b(int|float|string|bool|void|auto)\\b"
                },
                {
                    "name": "keyword.modifier.dakshin",
                    "match": "\\b(public|private|protected|static|final|abstract|async|await)\\b"
                },
                {
                    "name": "keyword.operator.dakshin",
                    "match": "\\b(new|delete|sizeof|typeof|instanceof)\\b"
                },
                {
                    "name": "constant.language.dakshin",
                    "match": "\\b(true|false|null|undefined)\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.dakshin",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.dakshin",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.dakshin",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        {
                            "name": "constant.character.escape.dakshin",
                            "match": "\\\\."
                        }
                    ]
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.decimal.dakshin",
                    "match": "\\b\\d+(\\.\\d+)?([eE][+-]?\\d+)?\\b"
                },
                {
                    "name": "constant.numeric.hexadecimal.dakshin",
                    "match": "\\b0[xX][0-9a-fA-F]+\\b"
                },
                {
                    "name": "constant.numeric.binary.dakshin",
                    "match": "\\b0[bB][01]+\\b"
                },
                {
                    "name": "constant.numeric.octal.dakshin",
                    "match": "\\b0[oO][0-7]+\\b"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "entity.name.function.dakshin",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
                },
                {
                    "name": "support.function.builtin.dakshin",
                    "match": "\\b(print|println|input|length|abs|min|max|malloc|free|system|time|exit|strlen|strcmp|strcpy|strcat|msgbox|alert|confirm|beep)\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.arithmetic.dakshin",
                    "match": "\\+|\\-|\\*|\\/|\\%|\\+\\+|\\-\\-"
                },
                {
                    "name": "keyword.operator.comparison.dakshin",
                    "match": "==|!=|<|>|<=|>="
                },
                {
                    "name": "keyword.operator.logical.dakshin",
                    "match": "&&|\\|\\||!"
                },
                {
                    "name": "keyword.operator.assignment.dakshin",
                    "match": "=|\\+=|\\-=|\\*=|\\/=|\\%="
                },
                {
                    "name": "keyword.operator.bitwise.dakshin",
                    "match": "&|\\||\\^|~|<<|>>"
                }
            ]
        },
        "identifiers": {
            "patterns": [
                {
                    "name": "variable.other.dakshin",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                }
            ]
        }
    }
}
